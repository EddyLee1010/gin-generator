{{/* request_service.tmpl */}}
package {{.PackageName}}

import (
"github.com/gin-gonic/gin"
"github.com/jinzhu/copier"
"{{.ProjectPath}}/dao/models"
"{{.ProjectPath}}/global"
"{{.ProjectPath}}/service/front/internal"
"go.uber.org/zap"
"time"
)

// Get{{.StructName}}ListReq 列表请求结构体
type Get{{.StructName}}ListReq struct {
{{- range .FilterFields }}
{{ .Name }} {{ .Type }} `form:"{{ .Tag }}"`
{{- end }}

internal.PageInfo
}

type Get{{.StructName}}ListResponse struct {
{{- range .ExportedFields }}
{{ .Name }} {{ .Type }} `json:"{{ .JSONName }}"`
{{- end }}
}

func (req Get{{.StructName}}ListReq) Exec(c *gin.Context) (any, int64, error) {
do := global.MyQuery.{{.StructName}}
query := do.WithContext(c)
{{- range .FilterFields }}
if req.{{ .Name }} != nil {
query = query.Where(do.{{ .Name }}.Eq(*req.{{ .Name }}))
}
{{- end }}
total, err := query.Count()
if err != nil {
global.LOG.Error("Get{{.StructName}}List", zap.Error(err))
return nil, 0, err
}
if req.PageSize == 0 {
req.PageSize = 10
}
query = query.Offset(req.PageSize * (req.Page - 1)).Limit(req.PageSize).Order(do.ID.Desc())

var res []Get{{.StructName}}ListResponse
err = query.Scan(&res)
if err != nil {
return nil, 0, err
}
return res, total, nil
}

// Create{{.StructName}}Req 创建请求结构体
type Create{{.StructName}}Req struct {
{{- range .ExportedFieldsNoID }}
{{ .Name }} {{ .Type }} `json:"{{ .JSONName }}"`
{{- end }}
}

func (r Create{{.StructName}}Req) Exec(c *gin.Context) error {
var obj = global.MyQuery.{{.StructName}}
var entity models.{{.StructName}}
copier.Copy(&entity, &r)
entity.CreatedAt = time.Now()
entity.UpdatedAt = time.Now()
return obj.WithContext(c).Create(&entity)
}

// Update{{.StructName}}Req 更新请求结构体
type Update{{.StructName}}Req struct {
Id int64 `json:"id" binding:"required"`
{{- range .ExportedFieldsNoID }}
{{ .Name }} {{ .Type }} `json:"{{ .JSONName }}"`
{{- end }}
}

func (u Update{{.StructName}}Req) Exec(c *gin.Context) error {
var obj = global.MyQuery.{{.StructName}}
_, err := obj.WithContext(c).Where(obj.ID.Eq(u.Id)).Updates(u)
if err != nil {
global.LOG.Error("Update{{.StructName}}", zap.Error(err))
}
return err
}

// Delete{{.StructName}}Req 删除请求结构体
type Delete{{.StructName}}Req struct {
Id int64 `json:"id" binding:"required"`
}

func (u Delete{{.StructName}}Req) Exec(c *gin.Context) error {
var obj = global.MyQuery.{{.StructName}}
_, err := obj.WithContext(c).Where(obj.ID.Eq(u.Id)).Delete()
if err != nil {
global.LOG.Error("Delete{{.StructName}}", zap.Error(err))
}
return err
}
