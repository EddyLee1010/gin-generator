package cmd

import (
	"fmt"
	"github.com/eddylee1010/gin-generator/generator"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"html/template"
	"log/slog"
	"strings"
)

// Column cli需要的信息
type Column struct {
	Name       string // Go 字段名（大驼峰）
	TagName    string // 原始数据库字段名
	Type       string // Go 类型
	IsNullable bool
	IsPrimary  bool
	IsPointer  bool
}

// TableTemplateData 存储模板数据
type TableTemplateData struct {
	StructName       string   // Go 结构体名
	TableName        string   // 数据库表名
	SearchableFields []Column // 用于查询的字段（目前可以是所有非主键字段）
	AllFields        []Column // 所有字段
	ModulePath       string   // 模块路径（用于 import）
	ProjectName      string
}

// ColumnInfo 存储数据库原始信息
type ColumnInfo struct {
	ColumnName string `gorm:"column:COLUMN_NAME"`
	DataType   string `gorm:"column:DATA_TYPE"`
	ColumnKey  string `gorm:"column:COLUMN_KEY"`
	IsNullable string `gorm:"column:IS_NULLABLE"`
}

var genServiceCmd = &cobra.Command{
	Use:   "service",
	Short: "😘 生成service层代码 😄",
	PreRunE: func(cmd *cobra.Command, args []string) error {
		err := generator.InitTemplates()

		viper.SetConfigFile("gen-config.yaml")
		err = viper.ReadInConfig()
		if err != nil {
			return err
		}

		return err
	},
	Run: func(cmd *cobra.Command, args []string) {
		generateServiceFiles(viper.GetString("project_name"))
	},
	SilenceErrors: true,
	SilenceUsage:  true,
}

func init() {
	genCmd.AddCommand(genServiceCmd)
}

func generateServiceFiles(projectName string) {
	// 	1.	连接数据库
	db, err := gorm.Open(mysql.Open("msysg:n7iFhRNyRZZdGJYP@tcp(8.130.123.223:3306)/msysg"))
	if err != nil {
		fmt.Println("❌ 连接数据库失败")
		return
	}
	//	2.	读取所有表名
	tableNames, err := getAllTableNamesByGorm(db)
	if err != nil {
		return
	}
	for _, tableName := range tableNames {

		//	3.	读取每张表的字段结构（字段名、类型、是否为主键等）
		info, err := loadTableInfoByGorm(db, tableName, projectName)
		if err != nil {
			slog.Error("❌ 读取表结构失败", "err", err)
			return
		}
		// 补充信息
		info.ProjectName = projectName
		slog.Debug("", "", info)
		generator.RenderTemplateToFile(generator.ServiceTemplate, info, "services/"+tableName+".go")
	}
	//	4.	转换为模板数据结构
	//	5.	渲染生成每个表的 service.go 文件
	// 6. 生成internal的common
	// 初始化service模版
	ServiceInternalTemplate, err := template.New("service_internal").Parse(`// Code generated by gin-generator . DO NOT EDIT.
// Code generated by gin-generator . DO NOT EDIT.
// Code generated by gin-generator . DO NOT EDIT.
package internal

type PageInfo struct {
	Page     int ` + "`form:\"page\"`" + `
	PageSize int ` + "`form:\"pageSize\"`" + `
}`)
	if err != nil {
		slog.Error("Failed to Parse template", "error", err)
		return
	}
	generator.RenderTemplateToFile(ServiceInternalTemplate, nil, "services/internal/common.go")
}

func getAllTableNamesByGorm(db *gorm.DB) ([]string, error) {
	var tables []string
	err := db.Raw(`SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = DATABASE()`).Scan(&tables).Error
	return tables, err
}

func loadTableInfoByGorm(db *gorm.DB, tableName, modulePath string) (*TableTemplateData, error) {

	var columnInfos []ColumnInfo
	err := db.Raw(`
		SELECT COLUMN_NAME, DATA_TYPE, COLUMN_KEY, IS_NULLABLE
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = ?
		ORDER BY ORDINAL_POSITION
	`, tableName).Scan(&columnInfos).Error
	if err != nil {
		return nil, err
	}

	var columns []Column
	var searchable []Column
	structName := toCamelCase(tableName)

	for _, col := range columnInfos {
		goType, isPointer := mysqlTypeToGoType(col.DataType, col.IsNullable)
		c := Column{
			Name:       toCamelCase(col.ColumnName),
			TagName:    col.ColumnName,
			Type:       goType,
			IsNullable: col.IsNullable == "YES",
			IsPrimary:  col.ColumnKey == "PRI",
			IsPointer:  isPointer,
		}
		columns = append(columns, c)

		// 过滤createAt updateAt deleteAt字段
		if c.TagName == "created_at" || c.TagName == "updated_at" || c.TagName == "deleted_at" {
			continue
		}
		if !c.IsPrimary {
			searchable = append(searchable, c)
		}

	}

	return &TableTemplateData{
		StructName:       structName,
		TableName:        tableName,
		AllFields:        columns,
		SearchableFields: searchable,
		ModulePath:       modulePath,
	}, nil
}

func mysqlTypeToGoType(mysqlType string, nullable string) (goType string, isPointer bool) {
	switch mysqlType {
	case "int", "tinyint", "smallint":
		goType = "int32"
	case "bigint", "mediumint":
		goType = "int64"
	case "varchar", "text", "longtext", "mediumtext", "char":
		goType = "string"
	case "datetime", "timestamp", "date":
		goType = "time.Time"
	case "float", "double", "decimal":
		goType = "float64"
	case "bit":
		goType = "bool"
	default:
		goType = "string"
	}
	isPointer = nullable == "YES" && goType != "time.Time" && goType != "string"
	if isPointer {
		goType = "*" + goType
	}
	return
}

// toCamelCase 将下划线分隔的字符串转换为驼峰式
func toCamelCase(s string) string {
	parts := strings.Split(s, "_")
	for i, p := range parts {
		if len(p) == 0 {
			continue
		}
		// 如果 包含_id 则转位ID。为了兼容gorm
		if p == "id" {
			parts[i] = "ID"
			continue
		}
		// 正常情况
		parts[i] = strings.ToUpper(string(p[0])) + strings.ToLower(p[1:])
	}
	return strings.Join(parts, "")
}
